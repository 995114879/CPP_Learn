作业：
stack设计是否合理？

 T top();

 void pop();

 void push(const T& e);


 T pop();
-------------------------------------------
std::getline()


-------------------------------------------
流：（1) 有序性，你只管通过接口插入或者读出，序不用你来维护
		format("{}, {}", a, b, c); // 对应起来

	(2) 边界管理

		std::cout << "abc" << 7 << 3.24 << '\n';

		int num;
		std::cin >> num;

fstream: 相比于 C 语言的FILE*操作，你站在一个更高的抽象的层面。

-------------------------------------------------------
stringstream， 来实现一些非关键的处理

vector<int>

-------------------------------------------------------


你站抽象层，     你面对的问题空间
你站底层次的角度，你面对的实现空间

实现一个两个字符串相加的功能

std::string a, b;
std::string c = a + b;

const char* a = "";
const char* b = ""

char result[1024];

--------------------------------

不要提早优化，(局部性的优化)

--------------------------------

10个, 从 POD -> response(响应时间短小), BU
20-40，

--------------------------------

0x10 => b0001 0000
0x01 => b0000 0001
------------------
         0001 0001


--------------------------------

计算机的底层都是二值逻辑（0,1）

机器语言->汇编语言->C/C++->Python,C#,Kotin

信息密集比较高，7x24.

手工编辑二进制，从二进制层进行的优化。

--------------------------------

switch key => 考虑使用二进制位去处来处理

0000 0001 => 0000 0010


int main() {
	check_permission(xxx, yyy); // test
}

bool readable = false;

0000 0001 // 读
0000 0010 // 写

0000 0011 // 读和写都有

0    => false
非0   => true