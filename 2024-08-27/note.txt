作业：
friend 打破了 OOP 里面的数据的封装性，也正是因为这个原因，它在开源代码里面。
在一些特殊的场景会发挥出重要的作用。

std::ostream& operator<<(std::ostream& os, const TagetObject& to) {
	os << to.member_data << '\n';
}

如果访问成员函数，通过成员函数来获取成员变量的话，是一个函数调用，它必然要传(this)，

主要用在序列化，格式化输出:to_string，其他场景我们还是设计好getter, setter, getter() const

---------------------------------------------------------------------

我们重心是建立联系，让大家理解 (源于何处，去往何处)

A -> 0 -> A' -> A'' -> A
A(a1, a2, a3, a4, an...) -> 0 -> (a1, a2, a3) -> A

---------------------------------------------------------------------

path1 + path2 => full_path, join(拼接)

---------------------------------------------------------------------

自第一节课到现在，我们的程序基本上都在处理内存数据，我们很少涉及 IO，输出 std::cout

为了解决C 语言中格式化输入与输出带来的不安全的问题，C++引入了 IO 流.

Google => stdio.h 格式化输入与输出, IO流里面的东西面向对象的设计（重）不够轻量.

fmt 引入 Python， "{}, {}, {}"

------------------------------------------------------------------------

std::cout

------------------------------------------------------------------------
单例： 单一实例

这个类只能创建一个实例

class A;

A a_only;


------------------------------------------------------------------------

web 页面上面。需要我们在终端或者上位机应用上显示字符界面。

字符界面


FILE* fp = FILE_OBJ;

// fstream 这个用到的时候会查
// stringstream 常用的要熟悉
// std::cout, std::cerr 高频使用