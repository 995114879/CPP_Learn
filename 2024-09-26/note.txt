作业：
不要迷信“权威”，你的 leader 可能就是你权威，你可以按照他说的做，但是你不能不尊重事实，一定要尊重事实和客观事实。

过程之中做了多少努力，一般别人是看不到的，包括你的领导，领导的领导，保能看到有限结果的呈现，交付的东西，形式就变得非常
重要。

-----------------------------------------------------------------

CUDA编程 <=> 体系结构，类 C 语言的编程，(N GPU硬件架构)


游戏的时代，Nvidia 抓住了
区块链     Nvidia 抓住
AI        Nvidia 又抓住了
........................

CPU:是一个全才，（Control （逻辑运算，if , for , while))
               (computer (常归的运算))

               天生是为了我们描述逻辑的运算，simd

GPU:是一个专才，（并行计算）


a: [1, 2, 3, 4, .....N]
b: [2, 3, 4, 5, .....N+1]

result = a + b;

cpu: [x + y : x <- a, y <-b]
GPU: result = a + b; # a[1: 1000] + b[1: 1000]
					   a[1000: ] + b[1000: ]

并行计算，实际上在硬件层面上的同时计算
CPU 就可能是逻辑上在并行，实际上在分时切换

-------------------------------------------------------
嵌入式开 <=> cuda 编程

知道你的硬件环境，开发板，芯片，手册，工具链接（keil c, 8051)      GPU, 编程接口，cuda工具链接

cudaMalloc(GPU显存里面分配存储空间）, malloc(C语言的标准库函数，在主机的heap 上分配内存)
cudaFree						, free

vectorAdd<<<1, N>>>(d_a, d_b, d_c); // 1 用一个线程块，N 512个线程

 // CUDA 内核函数：用于在 GPU 上执行的代码
__global__ void vectorAdd(int* a, int* b, int* c) {
    int index = threadIdx.x;  // 获取每个线程的索引
    c[index] = a[index] + b[index];  // 执行向量加法
}

c[0] = a[0] + b[0];  // 执行向量加法
c[1] = a[1] + b[1];  // 执行向量加法
....
c[511] = a[511] + b[511];


理解地一个界面，接口，形象化的东西，投影（方便你理解）

xxx.cu