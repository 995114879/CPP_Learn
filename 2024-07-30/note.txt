首先：C++ 是一个什么东西
目标：C++ 复杂，model -> 工业化的必然过程
基础数据类型：machine code

int, float, char, bool, void

short, long, double

sizeof(), sizeof(), sizeof运算符
------------------------------------
// coding style ()

float F_TO_C(float F_INPUT) {
	return (F_INPUT) * 5 / 9;
}

时间和空间
------------------------------------

clion -> 中文安装包的 -> (阅读国外的论文的)

------------------------------------

中文操作系统Windows的话，要（关闭 360），安装在默认的位置，不自定义安装位置，toolchains 找不到的情况


------------------------------------

program = data + algo
          数据类型(生命周期管理) + 函数（广义）(流程控制)

1.顺序
2.分支 (bool) (2值逻辑)， (1,2[11,12]), 0, 1
3.loop

goto(jump) 

-----------
 `==`, `!=`, `<`, `>`, `<=`, `>=` => boolean value

 == => 表示相等
 != => 表示不相等

 '<' => 小于， "<="=> 小于等于
 '>' => 大于, ">=" => 大于等于

 && => 两边同时成立

 ------------
 if - else
python: elif , C++ => else if

switch => 提高一点性能, table driven
     1 ->  {
     	break;
     }
     2 ->

     3 ->
     4 ->
     5 ->


 varInput 
 if () {

 } else if () {

 } else if () {

 } else if () {

 }
 .....// 

 else {}

 ------------

 while (表达式) { // 如果表达式成立，为真
 	语句体就会一直执行
 	break;
 }

 do {} while (表达式)

 ------------

 for 主要用上界和下界都比较明确的时候
 for (int i = 0; i < 10; i++) {
 	if (i == 5) {
 		break;
 	}
 	std::cout << "i = " << i << std::endl;
 }

 在block body 提交结束用 break;
 ------------

int main() {
	int a1;
	int a2;
	int a3;
	int a4;
	int a5;
	int a6;
	int a7;
	int a8;
	int a9;
	int a10;

	std::cin >> a1;
	.....
	std::cin >> a10

	sum = a1 + .. + a10;
	average = sum / 10;



}

int arr1[10]; 

for (int i = 1; i <= 10; i++) {
	std::cin >> arr1[i-1];
}

---------------------------------
int arr[3]{0,1,2};
arr[0], arr[1], arr[2]

---------------------------------

连续的一块内存, Lua 1

---------------------------------

从 0 开始，但是生成的索引的代码更加高效

---------------------------------

强制类型转换： 1. 早期 C 风格(double)variable 2. static_cast<double>(variable)

std::array 数组

std::array<int, 3> x1;
std::array<double, 3> x2;


C风格的字符串本质上就是一个字符数组，

char*  name = "lili";

name[0] = 'l'
name[1] = 'i'

